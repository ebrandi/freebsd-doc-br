<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!--
Recently I suggested to myself that this should become a profiling
and debugging chapter, which covers things like ktrace(1) and
using other debugging (like -x in shell scripts).  But then I
realized that, over time and while DTrace becomes better supported,
that might make this chapter too large.
-->

<!--
  The FreeBSD Documentation Project
  The FreeBSD Brazilian Portuguese Documentation Project

  Original revision: r39544

  $FreeBSD$
-->

<chapter id="dtrace">
  <chapterinfo>
    <authorgroup>
      <author>
	<firstname>Tom</firstname>
	<surname>Rhodes</surname>
	<contrib>Written by </contrib>
      </author>
    </authorgroup>
  </chapterinfo>

  <title>&dtrace;</title>

  <sect1 id="dtrace-synopsis">
    <title>Sinopse</title>

    <indexterm><primary>&dtrace;</primary></indexterm>
    <indexterm>
      <primary>&dtrace; support</primary>
      <see>&dtrace;</see>
    </indexterm>

  <para>&dtrace;, também conhecido como Dynamic Tracing, foi 
     desenvolvido pela &sun; como uma ferramenta para localizar 
     gargalos de desempenho  em sistemas de produção e pré-produção. 
     Não é, de forma alguma, uma ferramenta de depuração, mas uma 
     ferramenta para a análise do sistema em tempo real para localizar 
     o desempenho e outras questões.</para>

  <para>&dtrace; é uma ferramenta notável de análise, com uma impressionante
     variedade de recursos para o diagnóstico de problemas no sistema. Pode também ser
     usado para executar scripts pré-programados para tirar maior vantagem de sua
     capacidades. Os usuários podem até mesmo ser autores de seus próprios utilitários 
     fazendo uso da &dtrace; D Language, o que lhes permite personalizar o seu perfil
     com base nas necessidades específicas.</para>

    <para>Após ler este capítulo, você saberá:</para>

    <itemizedlist>
      <listitem>
	<para>O que é e quais funcionalidades o &dtrace; oferece.</para>
      </listitem>

      <listitem>
	<para>As diferenças entre o &solaris; &dtrace; e o &dtrace; 
	  oferecido no &os;.</para>
      </listitem>

      <listitem>
	<para>Como habilitar e utilizar o &dtrace; no &os;.</para>
      </listitem>
    </itemizedlist>

    <para>Antes de ler este capítulo, você deveria:</para>

    <itemizedlist>
      <listitem>
	<para>Compreender conceitos básicos sobre &unix; e &os;
	  (<xref linkend="basics"/>).</para>
      </listitem>

      <listitem>
	<para>Estar familiarizado com procedimentos básicos 
	  de configuração/compilação do kernel do &os; 
	  (<xref linkend="kernelconfig"/>).</para>
      </listitem>

      <listitem>
	<para>Ter certa familiaridade com conceitos de segurança 
	  e como eles se aplicam no &os; 
          (<xref linkend="security"/>).</para>
      </listitem>

      <listitem>
	<para>Compreender como obter e recompilar os códigos fonte 
	  do &os; (<xref linkend="updating-upgrading"/>).</para>
      </listitem>
    </itemizedlist>

    <!--
      Temporary warning to avoid listing experimental versions
      and production versions of FreeBSD with this technology.
    -->
    <warning>
      <para>Este recurso é considerado experimental. Algumas opções 
	podem faltar em termos de funcionalidade, outras partes 
	podem não funcionar de jeito nenhum. Com o tempo, esse 
	recurso será considerado como algo que possa ser utilizado 
	em produção e esta documentação será alterada para 
	refletir tal situação.</para>
    </warning>
  </sect1>

  <sect1 id="dtrace-implementation">
    <title>Diferenças de Implementação</title>

    <para>Embora o &dtrace; no &os; seja muito semelhante ao 
      encontrado no &solaris;, existem diferenças que devem ser 
      explicadas antes de você continuar. A principal diferença que 
      os usuários irão notar é que, no &os;, o &dtrace; precisa ser 
      habilitado de uma forma específica para ser utilizado. 
      Existem opções adicionais no kernel e módulos que devem ser 
      habilitados para que o &dtrace; funcione corretamente. Essas 
      opções e esses módulos serão explicados mais tarde.</para>

    <para>Existe uma opção no kernel (<literal>DDB_CTF</literal>) que
      é usada para ativar o suporte a <acronym>CTF</acronym> 
      (Compact C Type Format) do &solaris;. O uso dessa opção permite 
      que seja possível obter determinados dados de módulos 
      e do próprio kernel. O <acronym>CTF</acronym>
      encapsula uma forma reduzida de informações de depuração
      semelhante ao <acronym>DWARF</acronym> e aos stabs.
      Este dados <acronym>CTF</acronym> são adicionados aos binários 
      pelas ferramentas <command>ctfconvert</command> e 
      <command>ctfmerge</command>. A ferramenta 
      <command>ctfconvert</command> analisa as seções de depuração em 
      formato <acronym>DWARF</acronym> <acronym>ELF</acronym> criadas 
      pelo compilador e a ferramenta <command>ctfmerge</command> 
      funde seções dos objetos <acronym>CTF</acronym> 
      <acronym>ELF</acronym> em quaisquer executáveis ou bibliotecas 
      compartilhadas. Mais detalhes sobre como habilitar essa 
      funcionalidade no kernel do &os; ainda estão por vir.</para>

    <para>Diferentes provedores existem para &os; e para &solaris;.
       O mais notável é o <literal>dtmalloc</literal>, que
       permite traçar chamadas a função <function>malloc()</function> 
       por tipo no kernel do &os;.</para>

    <para>Apenas o usuário <username>root</username> pode usar o 
       &dtrace; no &os;. Isso está relacionado com diferenças ligadas 
       a segurança. O &solaris; executa algumas verificações de 
       segurança em baixo nível que ainda não existem no &os;. Visto isso, 
       o uso do <devicename>/dev/dtrace/dtrace</devicename> é estritamente
       limitado ao <username>root</username>.</para>

    <para>Por fim, o &dtrace; está sob licença <acronym>CDDL</acronym> 
      (<literal>Common Development and Distribution License</literal>) 
      da &sun;. Os termos da <acronym>CDDL</acronym> estão disponíveis no 
      código fonte do &os; em 
      <filename>/usr/src/cddl/contrib/opensolaris/OPENSOLARIS.LICENSE</filename>. 
      Você também pode consultar os termos online em 
      <ulink url="http://www.opensolaris.org/os/licensing"></ulink>.</para>

    <para>Esta licença diz que um &os; que tenha opções para uso do 
      &dtrace; habilitadas no kernel ainda está licenciado sob licença 
      <acronym>BSD</acronym>, mas ela acaba com tudo isso quando 
      exige que módulos sejam distribuídos em formato binário, ou 
      quando esses binários são carregados pelo sistema.</para>
  </sect1>

  <sect1 id="dtrace-enable">
    <title>Habilitando Suporte ao &dtrace;</title>

    <para>To enable support for &dtrace;, add the following lines to
      the kernel configuration file:</para>

    <programlisting>options         KDTRACE_HOOKS
options         DDB_CTF</programlisting>

    <note>
      <para>Users of the AMD64 architecture will want to add the
	following line to their kernel configuration file:</para>

      <programlisting>options         KDTRACE_FRAME</programlisting>

      <para>This option provides support for the <acronym>FBT</acronym>
	feature.  &dtrace; will work without this option; however, there
	will be limited support for function boundary tracing.</para>
      </note>

    <para>All sources must be rebuilt and installed with <acronym>CTF</acronym> options.
      To accomplish this task, rebuild the &os; sources using:</para>

    <!-- XXXTR: WITH_CTF has been reported to leave a user with a
         broken system when used with buildworld.  Until this is
         fixed, comment out those parts.  When uncommenting, kill
         the extra screen.
    -->

    <screen>&prompt.root; <userinput>cd /usr/src</userinput>
<!-- &prompt.root; <userinput>make WITH_CTF=1 buildworld</userinput> -->
&prompt.root; <userinput>make WITH_CTF=1 kernel</userinput></screen>
<!-- &prompt.root; <userinput>make WITH_CTF=1 installworld</userinput>
&prompt.root; <userinput>mergemaster -Ui</userinput></screen> -->

    <para>The system will need to be restarted.</para>

    <para>After rebooting and allowing the new kernel to be loaded
      into memory, support for the Korn shell should be added.  This
      is needed as the &dtrace; toolkit has several utilities written
      in <command>ksh</command>.  Install the
      <filename role="package">shells/ksh93</filename>.  It is also
      possible to run these tools under
      <filename role="package">shells/pdksh</filename> or
      <filename role="package">shells/mksh</filename>.</para>

    <para>Finally, obtain the current &dtrace; toolkit.  The current
      version is available at
      <ulink url="http://www.opensolaris.org/os/community/dtrace/dtracetoolkit/"></ulink>.
      There is an install mechanism included; however, installation
      is not required to make use of the bundled utilities.</para>
  </sect1>

  <sect1 id="dtrace-using">
    <title>Utilizando o &dtrace;</title>

    <para>Before making use of &dtrace; functionality, the &dtrace; device
      must exist.  To load the device, issue the following
      command:</para>

    <screen>&prompt.root; <userinput>kldload dtraceall</userinput></screen>

    <para>&dtrace; support should now be available.  To view all probes
      the administrator may now execute the following command:</para>

    <screen>&prompt.root; <userinput>dtrace -l | more</userinput></screen>

    <para>All output is passed to the <command>more</command>
      utility as it will quickly overflow the screen buffer.  At
      this point, &dtrace; should be considered working.  It is now
      time to review the toolkit.</para>

    <para>The toolkit is a collection of ready-made scripts to run
      with &dtrace; to collect system information.  There are scripts
      to check open files, memory, <acronym>CPU</acronym> usage and
      a lot more.  Extract the scripts with the following
      command:</para>

    <screen>&prompt.root; <userinput>gunzip -c DTraceToolkit* | tar xvf -</userinput></screen>

    <para>Change into that directory with the <command>cd</command>
      and change the execution permissions on all files, designated
      as those files with lower case names, to
      <literal>755</literal>.</para>

    <para>All of these scripts will need modifications to their
      contents.  The ones which refer to
      <filename>/usr/bin/ksh</filename> need that changed to
      <filename>/usr/local/bin/ksh</filename>, the others which
      use <filename>/usr/bin/sh</filename> need to be altered to use
      <filename>/bin/sh</filename>, and finally the ones which
      use <filename>/usr/bin/perl</filename> will need altered to
      use <filename>/usr/local/bin/perl</filename>.</para>

    <important>
      <para>At this point it is prudent to remind the reader that
	&dtrace; support in &os; is <emphasis>incomplete</emphasis>
	and <emphasis>experimental</emphasis>.  Many of these scripts
	will not work as they are either too &solaris;-specific or
	use probes which are unsupported at this time.</para>
    </important>

    <para>At the time of this writing only two of the scripts of the
      &dtrace; Toolkit are fully supported in &os;:
      the <filename>hotkernel</filename>
      and <filename>procsystime</filename> scripts.  These are the two
      we will explore in the following parts of this section.</para>

    <para>The <filename>hotkernel</filename> is designed to identify
      which function is using the most kernel time.  Run normally, it
      will produce output similar to the following:</para>

    <screen>&prompt.root; <userinput>./hotkernel</userinput>
Sampling... Hit Ctrl-C to end.</screen>

    <para>The system administrator must use the
      <keycombo action="simul"><keycap>Ctrl</keycap><keycap>C</keycap>
      </keycombo> key combination to stop the process.  Upon
      termination, the script will display a list of kernel functions and
      timing information, sorting the output in increasing order of
      time:</para>

    <screen>kernel`_thread_lock_flags                                   2   0.0%
0xc1097063                                                  2   0.0%
kernel`sched_userret                                        2   0.0%
kernel`kern_select                                          2   0.0%
kernel`generic_copyin                                       3   0.0%
kernel`_mtx_assert                                          3   0.0%
kernel`vm_fault                                             3   0.0%
kernel`sopoll_generic                                       3   0.0%
kernel`fixup_filename                                       4   0.0%
kernel`_isitmyx                                             4   0.0%
kernel`find_instance                                        4   0.0%
kernel`_mtx_unlock_flags                                    5   0.0%
kernel`syscall                                              5   0.0%
kernel`DELAY                                                5   0.0%
0xc108a253                                                  6   0.0%
kernel`witness_lock                                         7   0.0%
kernel`read_aux_data_no_wait                                7   0.0%
kernel`Xint0x80_syscall                                     7   0.0%
kernel`witness_checkorder                                   7   0.0%
kernel`sse2_pagezero                                        8   0.0%
kernel`strncmp                                              9   0.0%
kernel`spinlock_exit                                       10   0.0%
kernel`_mtx_lock_flags                                     11   0.0%
kernel`witness_unlock                                      15   0.0%
kernel`sched_idletd                                       137   0.3%
0xc10981a5                                              42139  99.3%</screen>

    <!-- XXXTR: I attempted to use objdump and nm on /boot/kernel/kernel
        to find 0xc10981a5, but to no avail.  It would be nice to know
	how we should look that up. -->

    <para>This script will also work with kernel modules.  To use this
      feature, run the script with the <option>-m</option> flag:</para>

    <screen>&prompt.root; <userinput>./hotkernel -m</userinput>
Sampling... Hit Ctrl-C to end.
^C
MODULE                                                  COUNT   PCNT
0xc107882e                                                  1   0.0%
0xc10e6aa4                                                  1   0.0%
0xc1076983                                                  1   0.0%
0xc109708a                                                  1   0.0%
0xc1075a5d                                                  1   0.0%
0xc1077325                                                  1   0.0%
0xc108a245                                                  1   0.0%
0xc107730d                                                  1   0.0%
0xc1097063                                                  2   0.0%
0xc108a253                                                 73   0.0%
kernel                                                    874   0.4%
0xc10981a5                                             213781  99.6%</screen>

    <!-- XXXTR: I was unable to match these up with output from
        kldstat and kldstat -v and grep.  Maybe I'm missing something
	seriously obvious.  It is 5AM btw. -->

    <para>The <filename>procsystime</filename> script captures and
      prints the system call time usage for a given
      <acronym>PID</acronym> or process name.  In the following
      example, a new instance of <filename>/bin/csh</filename>
      was spawned.  The <filename>procsystime</filename> was executed
      and remained waiting while a few commands were typed on the
      other incarnation of <command>csh</command>.  These are the
      results of this test:</para>

    <screen>&prompt.root; <userinput>./procsystime -n csh</userinput>
Tracing... Hit Ctrl-C to end...
^C

Elapsed Times for processes csh,

         SYSCALL          TIME (ns)
          getpid               6131
       sigreturn               8121
           close              19127
           fcntl              19959
             dup              26955
         setpgid              28070
            stat              31899
       setitimer              40938
           wait4              62717
       sigaction              67372
     sigprocmask             119091
    gettimeofday             183710
           write             263242
          execve             492547
           ioctl             770073
           vfork            3258923
      sigsuspend            6985124
            read         3988049784</screen>

    <para>As shown, the <function>read()</function> system call seems to use the
      most time in nanoseconds with the <function>getpid()</function>
      system call used the least amount of time.</para>
  </sect1>

  <sect1 id="dtrace-language">
    <title>A Linguagem D</title>

    <para>O kit de ferramentas do &dtrace; inclui vários scripts 
      escritos numa linguagem especial utilizada pelo &dtrace;. 
      Essa linguagem, de acordo com documentações da &sun;, é chamada de 
      <quote>Linguagem D</quote> e é muito semelhante a C++. Uma abordagem 
      mais aprofundada a respeito dessa linguagem está fora do âmbito deste 
      documento. Ela é amplamente discutida em <ulink 
      url="http://wikis.sun.com/display/DTrace/Documentation"> </ulink>.</para>
  </sect1>
</chapter>

    <!-- XXXTR: Should probably put links and resources here.  I'm
        nervous about this chapter as it may require a partial
	re-write and large modification once DTrace is complete, but
	at least we can get everyone started ... -->
